This is the install file for the nuke-ms project. In this file you will find information on how to compile and install the application and its prerequisites.

nuke-ms is a free software project written by Alexander Korsunsky. You can use, modify and redistribute it under the conditions of the GNU General Public License version 3, a copy of which can be found in the file LICENSE.txt in the doc/ folder.


nuke-ms is intended to be as portable as possible and it might compile on many platforms, however few were tested. 
It is mainly distributed as a source code tarball, but a compiled and zipped version for win32 platforms is available for convenience.

To use the win32 version of nuke-ms, you can simply extract the zip file to a folder. You can find the executables in the bin/ directory.
To compile nuke-ms, install the required prerequisites and follow the compilation instructions below.


================================================================================
Contents of this file:


1. Prerequisites 
    1.1 Required tools and libraries
    1.2 Platform specific information
        1.2.1 Linux distributions
        1.2.2 Windows

2. Compiling
    2.1 Compiling under Unix
    2.2 Compiling under Windows TODO!!


---------------------------------------------------------------------------------
 
1) Prerequisites

To compile nuke-ms from source you need to install some libraries and tools. These dependencies might seem annoying, however they allow effective and portable development.

1.1) Required tools and libraries

These are the tools, their minimum required versions and their homepages that are needed to build nuke-ms:

    C++ Compiler
    A fairly recent C++ compiler is required to build nuke-ms. GCC is allways a safe bet, however other compilers might work as well. It's best to simply try out if you are able to compile nuke-ms. The following compilers were tested: gcc-3.4.5 (MinGW), gcc-4.3, gcc-4.4, MSVC8 (Visual Studio 2005), MSVC9 (Visual Studio 2008).

    Boost C++ Libraries,    1.35,       http://www.boost.org/
    The Boost Libraries are a set of portable high quality libraries of which most are header-only. The libraries that need to be included at link-time are Boost.System and Boost.Thread. 

    wxWidgets,              2.8,        http://www.wxwidgets.org/
    wxWidgets is a library for portable GUI programming and allows a native look-and-feel on various platforms. The components used are base and core.

    CMake,                  2.6,        http://www.cmake.org/
    CMake is portable build tool that can create native build files (such as Makefiles or project files) on a variety of platforms.


1.2) Platform specific information

Below is a list of some platforms and notes on the prerequisite installation. For Platforms not listed here, please visit the websites of the required tools and libraries and follow the instructions there to install or compile them.


1.2.1) Linux distributions

On many GNU/Linux or Unix distributions the tools are packaged and ready to use. To install them you only need to specify the package names to your favourite package manager. Following you see a list of some distributions with instructions on how to install the prerequisites:


Debian GNU/Linux:
    4.0 ("Etch"):
        Install the following packages and their dependencies: build-essentials cmake libboost-system1.35-dev libboost-thread1.35-dev
        The Boost libraries are not contained in the official archives, however Debian Backpors provides these packages. Follow the instruction on this site to install the necessary packages: http://www.backports.org/dokuwiki/doku.php?id=instructions .
        Unfortunately, the wxWidgets 2.8 libraries are not included in Debian 4.0, not even in the backports archive. You will have to download them from the wxWidgets website and compile them yourself. Refer to the wxWidgets documentation for details.

    5.0 ("Lenny"):
        Install the following packages and their dependencies: build-essentials cmake libboost-system1.35-dev libboost-thread1.35-dev libwxgtk2.8-dev 
        The Boost libraries are not contained in the official archives, however Debian Backpors provides these packages. Follow the instruction on this site to install the necessary packages: http://www.backports.org/dokuwiki/doku.php?id=instructions .

    Testing ("Squeeze"), Unstable ("Sid"):
        Install the following packages and their dependencies: build-essentials cmake libboost-system1.35-dev libboost-thread1.35-dev libwxgtk2.8-dev 

Ubuntu:
    8.10 ("Intrepid Ibex"), 9.04 ("Jaunty Jackalope"):
        Install the following packages and their dependencies: cmake libboost-system1.35-dev libboost-thread1.35-dev libwxgtk2.8-dev

    9.10 ("Karmic Koala"):
        Install the following packages and their dependencies: cmake libboost-system-dev libboost-thread-dev libwxgtk2.8-dev

Fedora:
    Fedora 10 ("Cambridge"):
        Install the following packages and their dependencies: cmake wxGTK
        Unfortunately, the Boost libraries included in Fedora 10 are outdated. You will have to download them from the Boost website and compile them yourself. Refer to the Boost documentation for details.

    Fedora 11 ("Leonidas")
        Install the following packages and their dependencies: cmake boost wxGTK

Arch Linux:
    Install the following packages and their dependencies: cmake boost wxgtk   


1.2.2) Windows

Prerequisite installation is pretty complicated on Windows. You might want to use the prepacked version of nuke-ms available here: ftp://ftp.berlios.de/pub/nuke-ms/alpha/nuke-ms-0.1-win32.zip

First of all you have to install CMake, this is the easiest step. Just download the Win32 installer package, double click on it and follow the usual installation dialogue.
The second step is to download and install wxWidgets and Boost. For wxWidgets, you come best off installing via the Win32 installer package, as the installer places the Libraries on a good place (somewhere where CMake can find them easily) by default, only the necessary headers and code are installed and because it offers nice buttons for documentation and uninstallation in the start menu. For Boost, you have to download the source package which suits your favourite compression utility best, and uncompress it to a folder.

Now comes the tricky part: you have to compile the libraries. This is possible with several compilers, I only tested three. Of course, you have to compile the libraries with the same compiler you want to compile nuke-ms. The instructions for each can be found in the documentation of the libraries. Below are some points that should be mentioned and are specific to nuke-ms:
    - nuke-ms relies on strings to be unicode. This means that the wxWidgets libraries also have to be built as unicode. This is an option you have to set when compiling wxWidgets.
    - The linkage should be "consistent" throughout all libraries and nuke-ms. I recommend compiling all libraries as static, and link them statically to the executable. This implies some size overhead but saves you dll-troubles.
    - Use debugging symbols in all libraries and in nuke-ms, or nowhere. When building nuke-ms you will have the choice of including debugging symbols, and cmake will complain if you don't have the libraries with the right debugging configuration installed.        
    - When using MinGW, you have to check the "WinAPI" option in the MinGW installer, it is required for the GUI and the Network components. (Of course, g++ and make must be installed too.)
    - When using Visual Studio 2008 or 2005, you have to install two additional boost libraries, namely date_time and regex. This is because the boost thread library implicitly depends on date_time, which itself depends on regex. Other compilers are smart enough to understand that no symbols from there are used in the project and do not require their presence, but obviously Visual Studio is not.


---------------------------------------------------------------------------------

2) Compiling

2.1) Compiling under Unix

After installing the required prerequisites, you can start compiling nuke-ms. 
To do so, change into a directory where you want to build nuke-ms, this directory can't be the same directory as the one the sourcecode lies in. You might want to use the "build" directory provided in the project root directory for this.
Then run the "cmake" command with the directory of the nuke-ms source - this is the "src" directory of the project directory - as argument. You might want to specify additional options, such as the location of the libraries or the generator to be used:
    add "-DBOOST_INCLUDEDIR" to specify the Boost include directory or "-DBOOST_LIBRARYDIR" to specify the Boost library directory to the command line in case cmake has troubles finding Boost
    add "-G" and your favourite toolchain supported by cmake to produce something other than makefiles for GNU Make. See the cmake manpage for the available generators.
Finally call your favourite toolchain to compile the source. This will simply be "make" if you didn't give the "-G" option to cmake.

A simple compilation of nuke-ms might look like this:
    $ cd ~/nuke-ms/build
    $ cmake ~/nuke-ms/src
    $ make

Of course you have to change the path for the project directory according to where you put it.

If the compilation succeeded you will find the executables in the "bin" directory of the directory you built nuke-ms in.


2.2) Compiling under Windows