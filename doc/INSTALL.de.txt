Dies ist die Installationsdatei für das nuke-ms Projekt. In dieser Datei finden Sie Information dazu wie man alle Abhängigkeiten installiert und das Projekt kompiliert.

nuke-ms ist ein freies Softwareprojekt geschrieben von Alexander Korsunsky. Sie können es unter den Bedingungen der GNU General Public License version 3 (GPLv3) verwenden , verändern und weitergeben. Diese Bedingungen können Sie in der Datei LICENSE.txt im doc/-Verzeichnis nachsehen.

nuke-ms soll so portabel wie möglich sein und auf so vielen Plattformen kompilierbar sein wie möglich; allerdings wurden nur wenige getestet.
Hauptsächlich ist es als Quellcode-Tarball erhältlich, aber eine kompilierte und gezippte Version für Windowsplattformen wird zur Bequemlichkeit bereitgestellt.

Um nuke-ms auf Windows zu verwenden, extrahieren Sie einfach die Zipdatei in einen Ordner. Sie können die ausführbaren Dateien im "bin"-Verzeichnis dieses Ordners finden.
Um nuke-ms selbst zu kompilieren, installieren Sie die Abhängigkeiten und folgen Sie den Anweisungen weiter unten.


================================================================================
Inhalt dieser Datei:


1. Voraussetzungen
    1.1 Benötigte Tools und Bibliotheken
    1.2 Plattformspezifische Informationen
        1.2.1 Linuxdistributionen
        1.2.2 Windows

2. Kompilieren
    2.1 Kompilieren unter Unix
    2.2 Kompilieren unter Windows
        2.2.1 mit MinGW
        2.2.2 mit Visual Studio 2008


---------------------------------------------------------------------------------

1) Vorraussetzungen

Um nuke-ms aus dem Quellcode zu kompilieren müssen Sie einige Bibliotheken und Tools installieren. Diese Abhängigkeiten mögen lästig erscheinen, allerdings erlauben sie eine effektive und gleichzeitig portable Programmierung.

1.1) Benötigte Tools und Bibliotheken

Dies sind die Tools und Bibliotheken die benötigt werden um nuke-ms zu bauen, ihre benötigte Mindestversion und ihre Webseiten.

    C++ Compiler
    Ein halbwegs moderner C++ compiler wird benötigt um nuke-ms zu bauen. Mit GCC ist man immer gut unterwegs, allerdings funktioniert es mit anderen Compilern wahrscheinlich auch. Am besten ist es wenn Sie einfach ausprobieren ob Sie nuke-ms kompilieren können. Folgende Compiler wurden getestet: gcc-3.4.5 (MinGW), gcc-4.3, gcc-4.4, MSVC9 (Visual Studio 2008). MSVC8 (Visual Studio 2005) funktioniert wahrscheinlich auch, allerdings ist es wegen fehlender Windows-SDK Bibliotheken um einiges umständlicher.

    Boost C++ Libraries,    1.35,       http://www.boost.org/
    Die Boost Bibliotheken sind portable, hochqualitative Bibliotheken von denen die meisten nur aus Headern bestehen. Diejenigen Bibliotheken die zur Linkzeit inkludiert werden müssen sind Boost.System und Boost.Thread.

    wxWidgets,              2.8,        http://www.wxwidgets.org/
    wxWidgets ist eine Bibliothek zur portablen GUI-Programmierung und erlaubt ein natives Aussehen auf vielen verschiedenen Plattformen. Die benutzten Komponenten sind "base" und "core"

    CMake,                  2.6,        http://www.cmake.org/
    CMake ist ein portables Build-Tool das native Builddateien (wie z.B. Makefiles oder Projectdateien) auf einer vielzahl von Plattformen erzeugen kann.


1.2) Plattformspezifische Informationen

Unten ist eine Liste mit einigen Plattformen und Anmerkungen zur Installation der Abhängigkeiten. Für Plattformen die hier nicht aufgeführt sind, besuchen Sie bitte die Webseiten der benötigten Tools und Bibliotheken und folgen Sie den Anweisungen dort um sie zu installieren oder zu kompilieren.


1.2.1) Linuxdistributionen

Auf vielen GNU/Linux- oder Unixdistributionen sind viele der Tools bereits verpackt und einsatzbereit. Um sie zu installieren brauchen sie ihrem Lieblingspaketmanager einfach nur die Paketnamen angzueben. Anschließend sehen sie eine Liste mit ein paar Distributionen mit Anweisungen zum Installieren der Voraussetzungen:


Debian GNU/Linux:
    4.0 ("Etch"):
        Installieren sie die folgenden Pakete und deren Abhängigkeiten: build-essentials cmake libboost-system1.35-dev libboost-thread1.35-dev
        Die Boost Bibliotheken sind nicht im offiziellen Archiv enthalten, allerdings stellt Debian Backports diese bereit. Folgen sie den Anweisungen auf dieser Seite um die benötigten Pakete zu installieren: http://www.backports.org/dokuwiki/doku.php?id=instructions.
        Leider wird wxWidgets 2.8 weder im offiziellen Archiv noch auf Debian Backports bereitgestellt; sie werden es selbst kompilieren müssen. Sehen für Details in der wxWidgets Dokumentation nach.

    5.0 ("Lenny"):
        Installieren sie die folgenden Pakete und deren Abhängigkeiten: build-essentials cmake libboost-system1.35-dev libboost-thread1.35-dev
        Die Boost Bibliotheken sind nicht im offiziellen Archiv enthalten, allerdings stellt Debian Backports diese bereit. Folgen sie den Anweisungen auf dieser Seite um die benötigten Pakete zu installieren: http://www.backports.org/dokuwiki/doku.php?id=instructions.

    Testing ("Squeeze"), Unstable ("Sid"):
        Installieren sie die folgenden Pakete und deren Abhängigkeiten: build-essentials cmake libboost-system1.35-dev libboost-thread1.35-dev

Ubuntu:
    8.10 ("Intrepid Ibex"), 9.04 ("Jaunty Jackalope"):
        Installieren sie die folgenden Pakete und deren Abhängigkeiten: build-essentials cmake libboost-system1.35-dev libboost-thread1.35-dev

    9.10 ("Karmic Koala"):
        Installieren sie die folgenden Pakete und deren Abhängigkeiten: cmake libboost-system-dev libboost-thread-dev libwxgtk2.8-dev

Fedora:
    Fedora 10 ("Cambridge"):
        Installieren sie die folgenden Pakete und deren Abhängigkeiten: cmake wxGTK-devel
        Leider sind die Boost Bibliotheken die in Fedora 10 enthalten sind zu alt. Sie werden sie von der Boost Webseite herunterladen und sie selbst kompilieren müssen. Für Details, sehen sie bitte in der Boost-Dokumentation nach.

Arch Linux:
        Installieren sie die folgenden Pakete und deren Abhängigkeiten: cmake boost wxgtk


1.2.2) Windows

Die Installation der Voraussetzungen ist auf Windows ziemlich kompliziert. Vielleicht holen sie sich liber die vorgepackte Windowsversion von nuke-ms, die hier erhältlich ist: ftp://ftp.berlios.de/pub/nuke-ms/alpha/nuke-ms-0.1-win32.zip

Als allererstes müssen sie CMake installieren; dies ist der einfachste Schritt. Laden sie sich einfach den Windowsinstaller herunter, doppelklicken sie auf die Datei und folgen sie dem gewohnten Installationsdialog.

Der zweite Schritt besteht darin wxWidgets und Boost herunterzuladen und zu kompilieren.
Für wxWidgets ist es am besten wen sie den Win32 Installer verwenden, weil der Installier die Bibliotheken an einen "guten" Platz kopiert (also dorthin wo CMake sie einfach finden kann), weil er nur die benötigten Header und Code installiert und weil er Schöne knöpfe für die Dokumentation und zum Deinstallieren im Startmenü installiert.
Für Boost müssen sie das Quellpaket das am besten zum Entpackwerkzeug ihrer Wahl passt herunterladen und es in einen Ordner extrahieren.

Jetzt kommt der schwierige Teil: sie müssen die Bibliotheken kompilieren. Dies ist mit einigen Plattformen möglich, allerdings habe ich nur wenige getestet. Natürlich müssen sie die Bibliotheken mit dem gleichen Compiler kompilieren, mit dem sie auch nuke-ms kompilieren. Die Anweisungen für die jeweiligen Compiler finden sie in der Dokumentation der Bibliotheken. Weiter unten finden sie eingige Punkte die erwähnt werden sollten oder spezifisch zu nuke-ms sind:
    - nuke-ms verlässt sich darauf dass alle Strings unicode sind - das bedeutet die wxWidgets Bibliotheken müssen als unicode gebaut werden. Dies ist eine Option, die sie setzen müssen wenn sie wxWidgets kompilieren.
    - Die Art des Linkens muss durch alle Bibliotheken und nuke-ms hindurch "konsistent" sein. Ich empfehle einfach alle Bibliotheken statisch zu linken. Das verursacht zwar einen gewissen Größen-Overhead, erspart ihnen allerdings DLL-Probleme.
    - Verwenden sie Debuggingsymbole in allen Bibliotheken und in nuke-ms, oder nirgendwo. Wenn sie nuke-ms kompilieren haben sie die Wahl es mit Debuggingsymbolen zu kompilieren oder nicht. CMake wird sich beschweren wenn die Bibliotheken in einer falschen Debuggingkonfiguration installiert sind.
    - Wenn sie MinGW verwenden müssen sie bei der Installation von MinGW die "WinAPI" Option wählen denn die WinAPI wird für die GUI und für die Netzwerkkomponenten benötigt. (Natürlich müssen g++ und make auch installiert werden.)
    - Wenn sie Visual Studio 2008 verwenden und die Boost Bibliotheken kompilieren sind sie am besten dran wenn sie einfach alle möglichen Konfigurationen kompilieren, das heißt mit und ohne Debuggingsymbole, als statische und als dynamische Bibliotheken. Das braucht zwar ziemlich viel Zeit, spart ihnen aber einiges an Problemen beim bauen von nuke-ms. Sie müssen zumindest zwei zusätliche Boost Bibliotheken installieren, nämlich date_time und regex. Das ist deswegen so weil Boost thread von date_time abhängt, welches seinerseits von regex abhängt. Ander Compiler sind schlau genug um zu verstehen dass keine Symbole aus diesen Bibliotheken gebraucht werden, aber Visual Studio ist es anscheinend nicht.


---------------------------------------------------------------------------------

2) Kompilieren

2.1) Kompilieren unter Linux

Nachdem sie die Abhängigkeiten installiert haben, können sie beginnen nuke-ms zu kompilieren.
Wechseln sie in ein Verzeichnis wo sie nuke-ms bauen wollen. Sie können zu diesem Zweck das "build" Verzeichnis im Projektordner verwenden.
Rufen sie dann das "cmake" kommando mit dem Verzeichnis wo der Quellcode von nuke-ms liegt - das ist das "src" Verzeichnis der Projektordners - als Argument auf. Vielleicht müssen sie einige zusätzliche Optionen angeben, wie zum Beispiel der Ort der Bibliotheken oder der CMake Generator der verwendet werden soll:
    Fügen sie "-DBOOST_INCLUDEDIR" um das Boost Includeverzeichnis oder "-DBOOST_LIBRARYDIR" um das Bibliotheksverzeichnis anzugeben zur Kommandozeile hinzu wenn CMake Probleme hat Boost zu finden.
    Fügen sie "-G" und ihre Lieblingstoolkette die von CMake unterstützt ist zur Kommandozeile hinzu um etwas anderes als Makefiles für GNU Make zu generieren. Sehen sie in der CMake manpage nach verfügbaren CMake Generatoren nach.
Schließlich rufen sie ihre Lieblingstoolkette zum kompilieren des Quellcodes auf. Das wird einfach "make" sein, wenn sie CMake keine "-G" option angegeben haben.

Ein einfaches bauen von nuke-ms könnte so aussehen:
    $ cd ~/nuke-ms/build
    $ cmake ~/nuke-ms/src
    $ make

Natürlich müssen sie den Pfad zum Projektverzeichzichnis jenachdem verändern wo sie es abgelegt hab.

Wenn das Kompilieren funktioniert hat finden sie die Ausführbaren Dateien im "bin" Untererzeichnis vom Verzeichnis wo sie nuke-ms gebaut haben.


2.2) Kompilieren unter Windows

An dieser Stelle will ich noch einmal betonen, dass das Kompilieren auf Windows eine anstrengende und lästige Aufgabe ist. Bitte installieren sie ein richtiges Betriebssystem oder laden sie sich die kompilierte Win32 Version von nuke-ms von diesem Link herunter: ftp://ftp.berlios.de/pub/nuke-ms/alpha/nuke-ms-0.1-win32.zip .

Dies sind ein paar Links die ihnen bei Problemen helfen könnten:

    http://www.cmake.org/Wiki/CMake_FAQ
    http://www.vtk.org/Wiki/CMake_Generator_Specific_Information
    http://www.cmake.org/cmake/help/cmake2.6docs.html#module:FindBoost
    http://www.cmake.org/cmake/help/cmake2.6docs.html#section_Variables%20that%20Control%20the%20Build
    http://msdn.microsoft.com/en-us/library/8kche8ah(VS.71).aspx
    http://garrys-brain.blogspot.com/2006/10/boost-library-and-visual-studio-2005.html


2.2.1) Mit MinGW

Um nuke-ms mit MinGW zu kompilieren, folgen sie diesen Anweisungen:

Wechseln sie zuerst in das Verzeichnis wo sie nuke-ms bauen wollen, wie z.B. das "build" Unterverzeichnis des Projektordners.
    > cd nuke-ms\build

Rufen sie dann CMake auf um die Makefiles zu generieren. Sie müssen ein paar Argumente angeben:
    -G "MinGW Makefiles": Der CMake Generator der verwendet werden soll, in diesem Fall der MinGW generator.
    -DBOOST_ROOT="<pfad\zu\boost>": Der Ort der Boost Bibliotheken, im (wahrscheinlichen) Falle dass der Boost Finder die Bibliotheken nicht finden kann. Ersetzen sie <pfad\zu\boost> mit dem Pfad wo sie Boost installiert haben.
    -DwxWidgets_ROOT_DIR="<pfad\zu\wxwidgets>": Der ort wo sie die wxWidgets Bibliothek installiert haben, im Falle dass der wxWidgets Finder wxWidgets nicht finden kann.Ersetzen sie <pfad\zu\wxwidgets> mit dem Pfad wo sie wxWidgets installiert haben.
    -DwxWidgets_CONFIGURATION=<config>: Die Konfiguration mit der sie wxWidgets kompiliert haben. Fügen sie das nur zur Kommandozeile hinzu, wenn CMake wxWidgets noch immer nicht finden kann; normalerweise wird das aber nicht benötigt. Ersetzen sie <config> mit msw, mswd, mswu, mswunivud oder Ähnlichem. Sie können die Konfiguration mit der sie wxWidgets kompiliert haben herausfinden, indem sie ins Verzeichnis "lib\gcc_lib" relativ zu ihrem wxWidgets Installationsverzeichnis schauen. Dort wird es Ordner mit dem selben Namen wie die Konfiguration geben. Erinnern sie sich, dass Unicode benötigt wird um nuke-ms zu kompilieren, also sollte das irgendetwas mit einem "u" im Namen sein.
    -DCMAKE_BUILD_TYPE=<type>: Verwenden sie Debug, Release, RelWithDebInfo oder MinSizeRel. Ich emfehle "Release" sofern sie nicht irgendetwas Nützliches mit Debuggingsymbolen anfangen können.
    <sourcepath>: Pfad zum nuke-ms Quellcode, das ist "src" relativ zum Projektverzeichnis.

Auf meinem Rechner sah die Konfigurationszeile so aus:
    > cmake -G "MinGW Makefiles" -DBOOST_ROOT=C:\boost_1_39_0 -DCMAKE_BUILD_TYPE=Release ..\src

Rufen sie schließlich mingw32-make auf. Wenn sie einen Multicoreprozessor haben, verwenden sie die -j<n> option zum Kompilieren mit <n> Instanzen des gcc gleichzeitig.
    > mingw32-make -j2

Wenn das Kompilieren funktioniert hat, finden sie die Ausführbaren Dateien im "bin" Unterverzeichnis des Verzeichnisses wo sie nuke-ms gebaut haben.
Wenn sie nuke-ms dann weiterverteilen wollen, müssen sie die Datei "mingwm10.dll", welche sie im "bin" Verzeichnis ihrer MinGW Installation finden können zusammen mit den nuke-ms Dateien verteilen. Wenn sie dynamisch mit irgendwelchen wxWidgets oder Boost Bibliotheken gelinkt haben, müssen sie auch diese mitverteilen.


2.2.2) Mit Visual Studio 2008

Wenn sie wirklich sicher sind, dass sie das tun wollen, folgen sie diesen Anweisungen:

Starten sie das Visual Studio Command Prompt aus dem Startmenü. Dies ist notwendig um alle Umgebungsvariablen zu setzen.

Wechseln sie in das Verzeichnis wo sie nuke-ms bauen wollen, wie z.B. das "build" Unterverzeichnis des Projektordners.
    > cd nuke-ms\build

Versuchen sie dann CMake aufzurufen um das Visual Studio Projekt zu generieren. Sie müssen ein paar Argumente angeben:
    -G "Visual Studio 9 2008": Der CMake Generator der verwendet werden soll, in diesem Fall der Visual Studio Project Generator.
    -DwxWidgets_ROOT_DIR="<pfad\zu\wxwidgets>": Der ort wo sie die wxWidgets Bibliothek installiert haben, im Falle dass der wxWidgets Finder wxWidgets nicht finden kann.Ersetzen sie <pfad\zu\wxwidgets> mit dem Pfad wo sie wxWidgets installiert haben.
    -DwxWidgets_CONFIGURATION=<config>: Die Konfiguration mit der sie wxWidgets kompiliert haben. Fügen sie das nur zur Kommandozeile hinzu, wenn CMake wxWidgets noch immer nicht finden kann; normalerweise wird das aber nicht benötigt. Ersetzen sie <config> mit msw, mswd, mswu, mswunivud oder Ähnlichem. Sie können die Konfiguration mit der sie wxWidgets kompiliert haben herausfinden, indem sie ins Verzeichnis "lib\vc_lib" relativ zu ihrem wxWidgets Installationsverzeichnis schauen. Dort wird es Ordner mit dem selben Namen wie die Konfiguration geben. Erinnern sie sich, dass Unicode benötigt wird um nuke-ms zu kompilieren, also sollte das irgendetwas mit einem "u" im Namen sein.
    -DBOOST_ROOT="<pfad\zu\boost>": Der Ort der Boost Bibliotheken, im (wahrscheinlichen) Falle dass der Boost Finder die Bibliotheken nicht finden kann. Ersetzen sie <pfad\zu\boost> mit dem Pfad wo sie Boost installiert haben.
    <sourcepath>: Pfad zum nuke-ms Quellcode, das ist "src" relativ zum Projektverzeichnis.

Das wird wahrscheinlich nicht reichen. Der Boost Finder mit Visual Studio ist ziemlich pingelig und muss genau wissen welchen Typ von Bibliotheken sie installiert haben. Fügen sie das zu ihrer Kommandozeile hinzu:
    > -DBoost_USE_STATIC_LIBS=ON: verwenden sie das wenn sie die statischen Boost Bibliotheken gebaut haben, denn ansonsten wird CMake die Bibliotheken nicht finden.

Schlussendlich sah die Konfigurationszeile für mich so aus:
    > cmake -G "Visual Studio 9 2008" -DBOOST_ROOT=C:\boost_1_39_0 -DBOOST_ROOT=C:\boost_1_39_0 ..\src

Doppelklichekn sie auf die .sln-Datei um Visual Studio mit dem erstellten Projekt zu starten.
Stellen sie sicher, dass sie die richtige Konfiguration (Release, Debug) für die installierten Bibliotheken einstellen, denn sonst wird Visual Studio Bibliotheken verlangen die sie nicht haben (angenommen sie haben nicht einfach alle Bibliotheken gebaut).

Wählen sie schließlich Build -> Build Solution aus dem Menü aus, um nuke-ms zu kompilieren.

Sie finden die Ausführbaren Dateien im "bin\Release", "bin\Debug", "bin\MinSizeRel" oder "bin\RelWithDebInfo" Unterverzeichnis des Verzeichnisses wo sie nuke-ms gebaut haben, abhängig davon welche Konfiguration sie gewählt haben.

Wenn sie nuke-ms weiterverteilen wollen, stellen se sicher dass Leute die nuke-ms verwenden wollen die Datei msvcp90.dll und msvcr90.dll auf ihrem System installiert haben.
Tun sie das entweder dadurch dass sie diese Dateien aus dem Verzeichnis "VC\redist\x86\Microsoft.VC90.CRT" relativ zum Visual Studio Installationsverzeichnis (also normalerweise "C:\Programme\Microsoft Visual Studio 9.0\VC\redist\x86\Microsoft.VC90.CRT") oder indem sie ihnen einen Link zur Downloadseite des Visual Studio Redistributable Pakets (http://www.microsoft.com/DOWNLOADS/details.aspx?FamilyID=9b2da534-3e03-4391-8a4d-074b9f2bc1bf) geben, wenn sie Meldungen über fehlende msvc*90 DLL's bekommen. Wenn sie dynamisch mit irgendwelchen wxWidgets oder Boost Bibliotheken gelinkt haben, müssen sie auch diese mitverteilen.


Dies schließt nun die Installationsanweisungen für nuke-ms ab, und gibt ihnen einen kleinen Einblick in das was ich erdulden musste (ganz besonders mit Visual Studio). Nun verwenden sie nuke-ms und haben sie Spaß dabei!

Grüße, Alexander
